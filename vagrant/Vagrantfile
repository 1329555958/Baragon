# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  raise "Please install vagrant-hostsupdater via `vagrant plugin install vagrant-hostsupdater`" if !Vagrant.has_plugin?("vagrant-hostsupdater")

  # additional plugin checks for base_image machine
  if ARGV[1] == 'base_image'
    raise "Please install vagrant-omnibus via `vagrant plugin install vagrant-omnibus --plugin-version=1.4.1`" if !Vagrant.has_plugin?("vagrant-omnibus")
    raise "Please install vagrant-berkshelf via `vagrant plugin install vagrant-berkshelf`" if !Vagrant.has_plugin?("vagrant-berkshelf")
  end

  config.vm.synced_folder "../", "/baragon", type: "nfs"
  config.vm.box = "baragon-develop"
  config.vm.box_url = "https://vagrantcloud.com/ssalinas/boxes/baragon-develop/versions/0.1.5/providers/virtualbox.box"

  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--memory", "1024"]
  end

  config.cache.auto_detect = true if Vagrant.has_plugin?("vagrant-cachier")

  config.vm.define "service", autostart: true do |build|
    build.vm.hostname = 'vagrant-baragon-service'
    build.vm.network :private_network, ip: '192.168.33.20'
    build.vm.network "forwarded_port", guest: 2181, host: 2181
    build.vm.provision "shell", path: "provision-service.sh"
  end

  config.vm.define "agent", autostart: true do |build|
    build.vm.hostname = 'vagrant-baragon-agent'
    build.vm.network :private_network, ip: '192.168.33.21'
    build.vm.provision "shell" do |s|
      s.path =  "provision-agent.sh"
      s.args =  "vagrant"
    end
  end

  # Used to spin up a additional agents for multi-agent testing
  %w(2 3 4 5).each do |x|
    config.vm.define "agent#{x}", autostart: false do |build|
      build.vm.hostname = "vagrant-baragon-agent#{x}"
      build.vm.network :private_network, ip: "192.168.33.2#{x}"
      build.vm.provision "shell" do |s|
        s.path =  "provision-agent.sh"
        s.args =  "vagrant#{x}"
       end
    end
  end

  # baragon-develop base image
  config.vm.define "base_image", autostart: false do |build|
    build.vm.box = "opscode_ubuntu-14.04_provisionerless"
    build.vm.box_url = "http://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-14.04_chef-provisionerless.box"
    build.vm.network :private_network, ip: "192.168.33.30"

    build.berkshelf.berksfile_path = 'Berksfile'
    build.berkshelf.enabled = true
    build.omnibus.chef_version = :latest

    build.vm.provision :shell do |shell|
      shell.inline = 'test -f $1 || (sudo apt-get update -y && touch $1)'
      shell.args = '/var/run/apt-get-update'
    end
    build.vm.provision :chef_solo do |chef|
      chef.log_level = :info
      chef.run_list = ["java"]
      chef.json = {:java => {:install_flavor => "oracle", :jdk_version => 7, :oracle => {:accept_oracle_download_terms => true}, :set_default => true}}
    end
    build.vm.provision :shell, inline: "sudo apt-get -y install maven zookeeper zookeeperd zookeeper-bin nginx"
    build.vm.provision "shell", path: "configure-nginx.sh"
  end
end


